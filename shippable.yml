---
# Linguagem e versão do projeto
language: node_js
node_js:
  - 8.15.1

# Quais branches acionarão os jobs
branches:
  only:
    - master

# Integração com o Docker Registry
integrations:
  hub:
    - integrationName: docker-registry
      type: dockerRegistryLogin

# Variáveis
env:
  global:
    - TEST_RESULTS_DIR=$SHIPPABLE_REPO_DIR/shippable/testresults
    - CODE_COVERAGE_DIR=$SHIPPABLE_REPO_DIR/shippable/codecoverage
    - TESTS_LOC_DIR=$SHIPPABLE_REPO_DIR/test
    - MOD_LOC=$SHIPPABLE_REPO_DIR/node_modules/.bin/
    - DOCKER_REPO="qconsp-app"
    - DOCKER_ACC=lowbit
    - SHIP_IMG_RES="docker_image_app"

build:
  ci:
    # Instalando dependências
    - npm install
    # Adicionando informações da versão na interface do app
    - shipctl replace views/css/style.css
    # Testes Unitários e Relatório de Cobertura
    - mkdir -p $TEST_RESULTS_DIR && mkdir -p $CODE_COVERAGE_DIR
    - $MOD_LOC/nyc $MOD_LOC/mocha --exit --recursive "$TESTS_LOC_DIR/http.js" -R mocha-junit-reporter --reporter-options mochaFile=$TEST_RESULTS_DIR/testresults.xml
    - $MOD_LOC/nyc report --reporter=cobertura --report-dir $CODE_COVERAGE_DIR
  post_ci:
    # Construindo imagem docker
    - docker build -t $DOCKER_ACC/$DOCKER_REPO:$BRANCH.$BUILD_NUMBER .
    # Armazenando imagem docker
    - docker push $DOCKER_ACC/$DOCKER_REPO:$BRANCH.$BUILD_NUMBER
  on_success:
    # Salvando informações sobre esta imagem para usar adiante no Workflow
    - shipctl put_resource_state $SHIP_IMG_RES versionName $BRANCH.$BUILD_NUMBER

resources:
  # Imagem Docker do App
  - name: docker_image_app
    type: image
    integration: docker-registry
    versionTemplate:
      sourceName: "lowbit/qconsp-app"
      isPull: false
      versionName: latest

jobs:
  # Gravando a versão da imagem no objeto (recurso) acima
  - name: qconsp-dev-app_runCI
    type: runCI
    steps:
      - OUT: docker_image_app
